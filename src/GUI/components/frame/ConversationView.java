package GUI.components.frame;

import java.awt.EventQueue;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.JFrame;

import com.chat.Chat;

import GUI.GUI;
import GUI.components.menus.MenuConv;
import GUI.components.menus.MenuConv.IMenuConvListener;
import GUI.components.panels.PChat;
import GUI.components.panels.PConv;
import GUI.components.panels.PSingle;;

public class ConversationView extends JFrame {

    public static void showOnWindow(PConv instance) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                ConversationView view = new ConversationView(instance);
                view.setVisible(true);
                /*
                 * setSize(400, 400);
                 * Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                 * frame.setLocation(dim.width / 2 - dim.getSize().width / 2,
                 * dim.height / 2 - dim.getSize().height / 2);
                 * frame.pack();
                 * frame.setVisible(true);
                 * 
                 * // para abrir sola la instancia correcta
                 * frame.
                 * +/
                 */
            }
        });
    }

    private ConversationView(PConv conversationPanel) {
        initComponents(conversationPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(PConv conversationPanel) {

        if (conversationPanel instanceof PChat) {
            System.out.println("Instance of PCHAT");
            PChat downcast = (PChat) conversationPanel;
            if (downcast.hasAdminRights()) {
                setTitle("[ADMIN]CHAT: " + conversationPanel.getTitle());
            } else {
                setTitle("CHAT: " + conversationPanel.getTitle());
            }
        } else if (conversationPanel instanceof PSingle) {
            System.out.println("Instance of PSINGLE");
        } else {
            System.out.println("Instance of PConv");
        }

        mMenuBar = new MenuConv(conversationPanel, iMenuConvListener);

        setJMenuBar(mMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(conversationPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(conversationPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));

        addWindowListener(new WindowListener() {

            @Override
            public void windowActivated(WindowEvent e) {
                conversationPanel.setState(true);
            }

            @Override
            public void windowClosed(WindowEvent e) {
                conversationPanel.setState(false);
            }

            @Override
            public void windowClosing(WindowEvent e) {
                conversationPanel.setState(false);

            }

            @Override
            public void windowDeactivated(WindowEvent e) {

            }

            @Override
            public void windowDeiconified(WindowEvent e) {

            }

            @Override
            public void windowIconified(WindowEvent e) {

            }

            @Override
            public void windowOpened(WindowEvent e) {
                conversationPanel.setState(true);
            }

        });

        pack();
    }// </editor-fold>

    private final IMenuConvListener iMenuConvListener = new IMenuConvListener() {

        @Override
        public void editChat(PChat instance) {
            Chat editedChat = instance.getChatInstance();
            setTitle("EDITED: " + editedChat.getTitle());
            GUI.getInstance().updateChat(editedChat);
        }

        @Override
        public void deleteChat(Chat deleted) {
            dispose();
        }

        @Override
        public void editMembers(PChat instance) {
        }

    };

    // Variables declaration - do not modify
    private MenuConv mMenuBar;
}
