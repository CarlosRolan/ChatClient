package GUI.view.components.item;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.SocketException;

import javax.swing.BorderFactory;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.border.Border;

import com.chat.Chat;
import com.chat.Member;

import GUI.GUI;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author carlos
 */

public class ItemView extends javax.swing.JPanel {

	/* STATIC */

	public static ItemView createItem(String reference, IMyItemViewListener listener, boolean isChat) {
		return new ItemView(reference, listener, isChat);
	}

	private Border hover = BorderFactory.createLineBorder(Color.DARK_GRAY);

	private final IMyItemViewListener iMyItemViewListener;

	private String mReference;

	private final String mId;
	private String mTitle;
	private String mSubTitle;

	private int unreadMsgs;

	// if is chat
	private boolean mChat;
	private boolean admin;

	/* GETTERs */
	public String getItemId() {
		return mId;
	}

	public String getTitle() {
		return mTitle;
	}

	public String getSubTitle() {
		return mSubTitle;
	}

	/* SETTERs */

	public void oneMoreMsg() {
		unreadMsgs++;
		mLabel2.setText(String.valueOf(unreadMsgs) + "! ");
		mLabel2.setBackground(Color.GREEN);
		mLabel2.setVisible(true);

	}

	public void msgsChecked() {
		unreadMsgs = 0;
		mLabel2.setVisible(false);
	}

	/**
	 * Creates new form Conversation
	 */
	private ItemView(String reference, IMyItemViewListener listener, boolean isChat) {

		if (isChat) {
			mChat = true;
			Chat chat = Chat.initChat(reference);
			mId = chat.getChatId();
			mTitle = chat.getTitle();
			mSubTitle = chat.getDescription();
		} else {
			String[] data;
			data = reference.split(Member.SEPARATOR);
			mId = data[0];
			mTitle = data[1];
			mSubTitle = "bio";
			mChat = false;
		}

		iMyItemViewListener = listener;
		mReference = reference;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		mImage = new java.awt.Canvas();
		mLabel0 = new javax.swing.JLabel();
		mLabel1 = new javax.swing.JLabel();
		mLabel2 = new javax.swing.JLabel();
		mLabel2.setBackground(Color.GREEN);
		mLabel2.setVisible(false);

		initPopUpMenu();

		setComponentPopupMenu(mPopupMenu);

		setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		mImage.setBackground(new java.awt.Color(0, 153, 153));
		mImage.setMaximumSize(new java.awt.Dimension(64, 64));
		mImage.setMinimumSize(new java.awt.Dimension(32, 32));
		mImage.setPreferredSize(new java.awt.Dimension(64, 64));

		mLabel0.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
		mLabel0.setText(mTitle);

		mLabel1.setText(mSubTitle);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(mImage, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(mLabel0)
										.addComponent(mLabel1))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(mLabel2)
								.addContainerGap()));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(mImage, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(mLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(layout.createSequentialGroup()
														.addComponent(mLabel0)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(mLabel1))))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		addMouseListener(mouseListener);
	}// </editor-fold>

	// Variables declaration - do not modify
	private java.awt.Canvas mImage;
	private javax.swing.JLabel mLabel0;
	private javax.swing.JLabel mLabel1;
	private javax.swing.JLabel mLabel2;
	private javax.swing.JPopupMenu mPopupMenu;
	// End of variables declaration

	private void initPopUpMenu() {
		mPopupMenu = new JPopupMenu();

		// as chat and as single
		JMenuItem iShowInfo = new JMenuItem("Show info");
		iShowInfo.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.out.println(mReference);
			}

		});

		mPopupMenu.add(iShowInfo);

		if (mChat) {
			// leave chat as admin or regular
			JMenuItem iLeaveChat = new JMenuItem("Leave chat");
			iLeaveChat.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {

				}

			});

			if (admin) {
				JMenuItem iDeleteChat = new JMenuItem("Delete Chat");
				iDeleteChat.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						try {
							GUI.getInstance().getSession().deleteChat(mId);
						} catch (SocketException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}

				});
				mPopupMenu.add(iDeleteChat);
			}

			mPopupMenu.add(iLeaveChat);

		}
	}

	/* IMPLEMENTATIONs */

	private final MouseListener mouseListener = new MouseListener() {

		@Override
		public void mouseClicked(MouseEvent e) {
			System.out.println("Btn clicked " + e.getButton());
			switch (e.getButton()) {
				case MouseEvent.BUTTON1:
					msgsChecked();
					if (mChat) {
						Chat chat = Chat.initChat(mReference);
						iMyItemViewListener.onRightClick(chat);
					} else {
						iMyItemViewListener.onRightClick(mId, mTitle, mSubTitle);
					}

					break;

				case MouseEvent.BUTTON2:
					break;

			}

		}

		@Override
		public void mouseEntered(MouseEvent e) {

		}

		@Override
		public void mouseExited(MouseEvent e) {

		}

		@Override
		public void mousePressed(MouseEvent e) {

		}

		@Override
		public void mouseReleased(MouseEvent e) {

		}

	};

	public interface IMyItemViewListener {

		void onRightClick(String iId, String iTitle, String iSubtitle);

		void onRightClick(Chat chat);

		void onNewMsg(String id, boolean isCHat);
	}

}