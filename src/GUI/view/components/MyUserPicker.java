/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI.view.components;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

import com.chat.Chat;
import com.chat.Member;

import GUI.GUI;

/**
 *
 * @author carlos
 */
public class MyUserPicker extends JDialog {

    /* STATIC */

    public static void selectMembers(java.awt.Frame parent, boolean modal, List<String> userOpList, String chatTitle,
            String chatDesc) {

        MyUserPicker picker = new MyUserPicker(parent, modal, userOpList, chatTitle, chatDesc, true);
        picker.setVisible(true);
    }

    

    public static void editPermissions(java.awt.Frame parent, boolean modal, List<String> userOpList, Chat chat) {

        String chatId = chat.getChatId();
        String chatDesc = chat.getDescription();

        List<String> chatMembers = new ArrayList<>();

        for (String iMemberRef : userOpList) {
            if (chat.isMemberInChat(iMemberRef)) {
                chatMembers.add(iMemberRef);
            }
        }

        MyUserPicker picker = new MyUserPicker(parent, modal, chatMembers, chatId, chatDesc, false);
        picker.setVisible(true);
    }


    private final List<String> mSelectedList;

    /**
     * Creates new form NewJDialog
     */
    public MyUserPicker(java.awt.Frame parent, boolean modal, List<String> userOpList, String chatTitle,
            String chatDesc, boolean isAdding) {
        super(parent, modal);
        mSelectedList = new ArrayList<>();
        initComponents(userOpList, chatTitle, chatDesc, isAdding);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(List<String> userOpList, String chatTitle, String chatDesc, boolean isAdding) {

        mBtnOk = new javax.swing.JButton();
        mBtnCancel = new javax.swing.JButton();
        mCKPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mBtnOk.setText("OK");
        mBtnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boolean created = GUI.getInstance().getSession().createNewChat(chatTitle, chatDesc, mSelectedList);
                if (created) {
                    JOptionPane.showMessageDialog(MyUserPicker.this, "Chat created");
                } else {
                    JOptionPane.showMessageDialog(MyUserPicker.this, "A chat with that name already exits");
                }
                dispose();

            }
        });

        mBtnCancel.setText("CANCEL");
        mBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispose();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mCKPanel, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(mBtnCancel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        234, Short.MAX_VALUE)
                                                .addComponent(mBtnOk)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mCKPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(mBtnCancel)
                                        .addComponent(mBtnOk))
                                .addContainerGap()));

        if (isAdding) {
            addUserOpList(userOpList);
        } else {
            setRightUserOpList(userOpList);
        }

        pack();
    }// </editor-fold>

    private void addUserOpList(List<String> userList) {
        for (String iter : userList) {
            JCheckBox ckIter = new JCheckBox(iter);

            JComboBox comboBox = new JComboBox<>();
            comboBox.addItem("Regular");
            comboBox.addItem("Admin");

            ckIter.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    String memeBerType;
                    switch (comboBox.getSelectedIndex()) {
                        case 0:
                            memeBerType = "REG";
                            break;
                        case 1:
                            memeBerType = "ADMIN";
                            break;
                        default:
                            memeBerType = "REG";
                            break;
                    }

                    String memberRef = iter + Member.SEPARATOR + memeBerType;

                    if (ckIter.isSelected()) {
                        mSelectedList.add(memberRef);
                    } else {
                        mSelectedList.remove(memberRef);
                    }

                    for (String string : mSelectedList) {
                        System.out.println("SEL" + string);
                    }
                }
            });

            mCKPanel.add(ckIter);
            mCKPanel.add(comboBox);
        }

        validate();
    }

    private void setRightUserOpList(List<String> userList) {
        for (String iter : userList) {
            JCheckBox ckIter = new JCheckBox(iter);

            JComboBox comboBox = new JComboBox<>();
            comboBox.addItem("Regular");
            comboBox.addItem("Admin");

            ckIter.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    String memeBerType;
                    switch (comboBox.getSelectedIndex()) {
                        case 0:
                            memeBerType = "REG";
                            break;
                        case 1:
                            memeBerType = "ADMIN";
                            break;
                        default:
                            memeBerType = "REG";
                            break;
                    }

                    String memberRef = iter + Member.SEPARATOR + memeBerType;

                    if (ckIter.isSelected()) {
                        mSelectedList.add(memberRef);
                    } else {
                        mSelectedList.remove(memberRef);
                    }

                    for (String string : mSelectedList) {
                        System.out.println("SEL" + string);
                    }
                }
            });

            mCKPanel.add(ckIter);
            mCKPanel.add(comboBox);
        }

        validate();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton mBtnCancel;
    private javax.swing.JButton mBtnOk;
    private javax.swing.JPanel mCKPanel;
    // End of variables declaration

    public interface IListener {
        void onOKClik(String chatTitle, String chatDesc);
    }

}
