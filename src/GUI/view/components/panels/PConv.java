/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package GUI.view.components.panels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import com.chat.Chat;
import com.data.MSG;

import GUI.GUI;
import controller.manager.FileManager;

/**
 *
 * @author carlos
 */
public abstract class PConv extends javax.swing.JPanel {

	public enum Type {
		CHAT("chat"),
		SINGLE("single");

		Type(String type) {

		}
	}

	/* STATIC */
	public static PSingle createSingleConv(String convId, String convTitle, String convSubTitle,
			IConvListener listener) {
		return new PSingle(convId, convTitle, convSubTitle, listener);
	}

	public static PChat createChatInstance(Chat chat, IConvListener listener) {
		return new PChat(chat, listener);
	}

	/* PROPs */
	protected volatile List<String> history;
	protected volatile DefaultListModel<String> mMsgListModel = new DefaultListModel<String>();
	protected String mTitle;
	protected String mSubTitle;
	protected String mId;
	protected boolean mIsChat = false;
	protected boolean mOpen = false;
	protected boolean mAdmin = false;
	protected String mChatRef;
	protected IConvListener iConvListener;

	public String getChatRef() {
		return mChatRef;
	}

	public boolean isChat() {
		return mIsChat;
	}

	public String getTitle() {
		return mTitle;
	}

	public void addLineToChat(String line) {
		history.add(line);
	}

	public boolean isOpen() {
		return mOpen;
	}

	public void setAdminRights(boolean admin) {
		mAdmin = true;
	}

	public void setState(boolean open) {
		mOpen = open;
	}

	/**
	 * The conversation's id can be a Chat id or a connection id
	 * 
	 * @return
	 */
	public String getConvId() {
		return mId;
	}

	public boolean isConvChat() {
		return mIsChat;
	}

	public boolean hasAdminRights() {
		return mAdmin;
	}

	public void requested() {
		requestFocus();
		mTxtPane.requestFocusInWindow();
	}

	public synchronized void addLine(String line) {
		mMsgListModel.addElement(line);
		FileManager.getInstance().saveConvHistory(mTitle, line, mIsChat);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	protected void initComponents() {

		mScrollPane0 = new javax.swing.JScrollPane();
		mList = new javax.swing.JList<>(mMsgListModel);
		mScrollPane1 = new javax.swing.JScrollPane();
		mTxtPane = new javax.swing.JTextPane();
		mBtnSend = new javax.swing.JButton();
		mLabel0 = new javax.swing.JLabel();

		setMinimumSize(new java.awt.Dimension(325, 400));
		setPreferredSize(new java.awt.Dimension(325, 400));

		mList.removeAll();
		mScrollPane0.setViewportView(mList);

		mScrollPane1.setViewportView(mTxtPane);

		mBtnSend.setText("SEND");
		mBtnSend.addActionListener(arg0 -> actionSend());

		mLabel0.setIcon(new javax.swing.ImageIcon("/home/carlos/Desktop/rawIcons/btn_copy_to_clipboard.png")); // NOI18N
		mLabel0.setText(mTitle + "\n" + mSubTitle);
		mLabel0.setAlignmentX(0.5F);
		mLabel0.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
		mLabel0.setMaximumSize(new java.awt.Dimension(64, 256));
		mLabel0.setMinimumSize(new java.awt.Dimension(32, 64));
		mLabel0.setRequestFocusEnabled(false);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(mScrollPane0)
														.addGroup(layout.createSequentialGroup()
																.addComponent(mBtnSend)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(mScrollPane1)))
												.addContainerGap())
										.addGroup(layout.createSequentialGroup()
												.addComponent(mLabel0, javax.swing.GroupLayout.DEFAULT_SIZE, 179,
														Short.MAX_VALUE)
												.addGap(140, 140, 140)))));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(mLabel0, javax.swing.GroupLayout.PREFERRED_SIZE, 45, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(mScrollPane0, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(mScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(mBtnSend))
								.addContainerGap()));

		addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {
				requested();
			}

			@Override
			public void focusLost(FocusEvent e) {
			}

		});

	}// </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.JButton mBtnSend;
	private javax.swing.JLabel mLabel0;
	private javax.swing.JList<String> mList;
	private javax.swing.JScrollPane mScrollPane0;
	private javax.swing.JScrollPane mScrollPane1;
	private javax.swing.JTextPane mTxtPane;
	// End of variables declaration

	private void actionSend() {
		String text = mTxtPane.getText();

		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm");
		LocalDateTime now = LocalDateTime.now();

		String line = "[" + dtf.format(now) + "]" + GUI.getInstance().getSession().getNick() + ": " + text;

		addLine("(you)" + line);
		mTxtPane.setText("");

		iConvListener.onMsgSent(mId, mTitle, mSubTitle, line, mIsChat);
	}

	protected void loadHistory() {
		for (String string : history) {
			addLine(string);
		}
	}

	public static class MenuConv extends JMenuBar {

		private static final PChat PConv = null;

		private final String ITEM_0 = "Show info";

		private final String ITEM_1 = "Leave chat";

		private final String ITEM_2 = "Settings";

		private final String ITEM_ADMIN_2_0 = "Manage users";
		private final String ITEM_ADMIN_2_0_0 = "Edit Rights";
		private final String ITEM_ADMIN_2_0_1 = "Add members";
		private final String ITEM_ADMIN_2_0_2 = "Delete members";
		private final String ITEM_ADMIN_2_1 = "Edit Bio";
		private final String ITEM_ADMIN_2_2 = "Edit Tittle";
		private final String ITEM_ADMIN_2_3 = "Delete chat";

		public MenuConv(PConv instance) {
			if (instance instanceof PChat) {
				initComponents((PChat) instance);
			} else if (instance instanceof PSingle) {
				initComponents((PSingle) instance);
			}
		}

		private void initComponents(PChat instance) {
			JMenuItem item0 = new JMenuItem(ITEM_0);
			add(item0);

			JMenuItem item1 = new JMenuItem(ITEM_1);
			add(item1);

			initAdmintItems(instance.hasAdminRights());
		}

		private void initComponents(PSingle instance) {
			JMenuItem item0 = new JMenuItem(ITEM_0);
			add(item0);
			JMenuItem item1 = new JMenuItem(ITEM_1);
			add(item1);
		}

		private void initAdmintItems(boolean isAdmin) {

			JMenu item2 = new JMenu();
			item2.setText(ITEM_2);
			if (isAdmin) {
				JMenu manageUsers = new JMenu(ITEM_ADMIN_2_0);
				JMenuItem manageRights = new JMenuItem(ITEM_ADMIN_2_0_0);
				manageRights.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO edit rights
					}

				});
				JMenuItem addMembers = new JMenuItem(ITEM_ADMIN_2_0_1);
				addMembers.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Add member to chat
					}

				});

				JMenuItem deleteMembers = new JMenuItem(ITEM_ADMIN_2_0_2);
				deleteMembers.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						throw new UnsupportedOperationException("Unimplemented method 'actionPerformed'");
					}

				});
				manageUsers.add(manageRights);
				manageUsers.add(addMembers);
				manageUsers.add(deleteMembers);

				item2.add(manageUsers);

				item2.add(new JMenuItem(ITEM_ADMIN_2_1));
				item2.add(new JMenuItem(ITEM_ADMIN_2_2));
				item2.add(new JMenuItem(ITEM_ADMIN_2_3));
				add(item2);
			}

		}

		private void changeTitle(String newTitle) {

		}

		private void changeDesc(String newDesc) {

		}

		private void showConvInfo() {

		}

		private void leaveChat() {
		}

	}

	public interface IConvListener {
		void onMsgSent(String convId, String convTitle, String convSubTitle, String line, boolean isChat);

		void onMsgRecieved(MSG msgReceived, boolean isChat);
	}

}
