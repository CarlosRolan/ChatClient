/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package GUI.view.panels;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;

import com.data.MSG;

import GUI.GUI;
import controller.manager.FileManager;

/**
 *
 * @author carlos
 */
public class PConv extends javax.swing.JPanel {

	/* STATIC */
	public static PConv createInstance(String convId, String convTitle, String convSubTitle, IConvListener listener,
			boolean isChat) {
		return new PConv(convId, convTitle, convSubTitle, listener, isChat);
	}

	public static void showOnWindow(PConv instance) {
		EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				instance.setState(true);
				JFrame frame = new JFrame(instance.getTitle());
				frame.setContentPane(instance);
				frame.setSize(400, 400);
				Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
				frame.setLocation(dim.width / 2 - dim.getSize().width / 2,
						dim.height / 2 - dim.getSize().height / 2);
				frame.setVisible(true);

				// para abrir sola la instancia correcta
				frame.addWindowListener(new WindowListener() {

					@Override
					public void windowActivated(WindowEvent e) {
						instance.setState(true);

					}

					@Override
					public void windowClosed(WindowEvent e) {
						instance.setState(false);
					}

					@Override
					public void windowClosing(WindowEvent e) {
						instance.setState(false);

					}

					@Override
					public void windowDeactivated(WindowEvent e) {

					}

					@Override
					public void windowDeiconified(WindowEvent e) {
			

					}

					@Override
					public void windowIconified(WindowEvent e) {
					
					}

					@Override
					public void windowOpened(WindowEvent e) {
						instance.setState(true);

					}

				});

			}
		});
	}

	/* PROPs */
	private volatile List<String> history;
	private boolean mIsChat = false;
	public DefaultListModel<String> mMsgListModel = new DefaultListModel<String>();
	private String mTitle;
	private String mSubTitle;
	private String mId;
	private boolean isOpen = false;
	private final IConvListener iConvListener;

	public String getTitle() {
		return mTitle;
	}

	public synchronized void addLineToChat(String line) {
		history.add(line);
	}

	public boolean getState() {
		return isOpen;
	}

	public void setState(boolean open) {
		isOpen = open;
	}

	/**
	 * The conversation's id can be a Chat id or a connection id
	 * 
	 * @return
	 */
	public String getConvId() {
		return mId;
	}

	public boolean isConvChat() {
		return mIsChat;
	}

	public void requested() {
		requestFocus();
		jTextPane1.requestFocusInWindow();
	}

	public synchronized void addLine(String line) {
		mMsgListModel.addElement(line);
		FileManager.getInstance().saveConvHistory(mTitle, line, mIsChat);
	}

	private PConv(String convId, String convTitle, String convSubTitle, IConvListener listener, boolean isChat) {
		iConvListener = listener;
		mIsChat = isChat;
		mId = convId;
		mTitle = convTitle;
		mSubTitle = convSubTitle;
		isOpen = false;
		if (!FileManager.getInstance().initConvHistory(convTitle, isChat)) {
			history = FileManager.getInstance().loadConvHistory(convTitle, isChat);
			loadHistory();
		}
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jMessages = new javax.swing.JList<>(mMsgListModel);
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextPane1 = new javax.swing.JTextPane();
		jButton1 = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();

		setMinimumSize(new java.awt.Dimension(325, 400));
		setPreferredSize(new java.awt.Dimension(325, 400));

		jMessages.removeAll();
		jScrollPane1.setViewportView(jMessages);

		jScrollPane2.setViewportView(jTextPane1);

		jButton1.setText("SEND");
		jButton1.addActionListener(arg0 -> actionSend());

		jLabel2.setIcon(new javax.swing.ImageIcon("/home/carlos/Desktop/rawIcons/btn_copy_to_clipboard.png")); // NOI18N
		jLabel2.setText(mTitle);
		jLabel2.setAlignmentX(0.5F);
		jLabel2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
		jLabel2.setMaximumSize(new java.awt.Dimension(64, 256));
		jLabel2.setMinimumSize(new java.awt.Dimension(32, 64));
		jLabel2.setRequestFocusEnabled(false);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jScrollPane1)
														.addGroup(layout.createSequentialGroup()
																.addComponent(jButton1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jScrollPane2)))
												.addContainerGap())
										.addGroup(layout.createSequentialGroup()
												.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 179,
														Short.MAX_VALUE)
												.addGap(140, 140, 140)))));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jButton1))
								.addContainerGap()));

		addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {
				requested();
			}

			@Override
			public void focusLost(FocusEvent e) {
			}

		});

	}// </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JList<String> jMessages;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	public javax.swing.JTextPane jTextPane1;
	// End of variables declaration

	private void actionSend() {
		String text = jTextPane1.getText();

		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm");
		LocalDateTime now = LocalDateTime.now();

		String line = "[" + dtf.format(now) + "]" + GUI.getInstance().pClientCon.getNick() + ": " + text;

		addLine("(you)" + line);
		jTextPane1.setText("");

		iConvListener.onMsgSent(mId, mTitle, mSubTitle, line, mIsChat);
	}

	private void loadHistory() {
		for (String string : history) {
			addLine(string);
		}
	}

	public interface IConvListener {
		void onMsgSent(String convId, String convTitle, String convSubTitle, String line, boolean isChat);

		void onMsgRecieved(MSG msgReceived, boolean isChat);
	}

}
